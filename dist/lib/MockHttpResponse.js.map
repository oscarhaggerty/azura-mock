{"version":3,"sources":["lib/MockHttpResponse.es6"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,IAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC;AAClD,IAAM,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;;IAE3C,gBAAgB;YAAhB,gBAAgB;;AACT,WADP,gBAAgB,CACR,MAAM,EAAE;0BADhB,gBAAgB;;AAElB,+BAFE,gBAAgB,6CAEV;;;AAGR,QAAI,CAAC,UAAU,GAAG,GAAG,CAAC;AACtB,QAAI,CAAC,aAAa,GAAG,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;;AAGnD,QAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;;;AAGnB,QAAI,CAAC,WAAW,GAAG,KAAK,CAAC;AACzB,UAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;AACvB,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC;GACtB;;eAfG,gBAAgB;;WAiBX,mBAAC,IAAI,EAAE,GAAG,EAAE;AACnB,UAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,GAAG,CAAC;KACzC;;;WAEQ,mBAAC,IAAI,EAAE;AACd,aAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KAC1C;;;WAEW,sBAAC,IAAI,EAAE;AACjB,aAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KAC1C;;;WAEQ,mBAAC,UAAU,EAAE,MAAM;UAAE,OAAO,yDAAG,MAAM;0BAAE;AAC9C,YAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AAC7B,YAAI,CAAC,aAAa,GAAG,MAAM,IAAI,YAAY,CAAC,UAAU,CAAC,IAAI,SAAS,CAAC;;AAErE,YAAI,OAAO,EAAE;AACX,eAAK,IAAM,KAAI,IAAI,OAAO,EAAE;AAC1B,gBAAI,CAAC,SAAS,CAAC,KAAI,EAAE,OAAO,CAAC,KAAI,CAAC,CAAC,CAAC;WACrC;SACF;OACF;KAAA;;;SAtCG,gBAAgB;GAAS,aAAa;;AAyC5C,MAAM,CAAC,OAAO,GAAG,gBAAgB,CAAC","file":"lib/MockHttpResponse.js","sourcesContent":["/**\r\n * A simple mock implementation of Node's http.ServerResponse.\r\n */\r\n\r\nconst STATUS_CODES = require('http').STATUS_CODES;\r\nconst ThroughStream = require('./ThroughStream');\r\n\r\nclass MockHttpResponse extends ThroughStream {\r\n  constructor(socket) {\r\n    super();\r\n\r\n    // default to not found\r\n    this.statusCode = 404;\r\n    this.statusMessage = STATUS_CODES[this.statusCode];\r\n\r\n    // initial internal headers hash\r\n    this._headers = {};\r\n\r\n    // these are here primarily to make koa work\r\n    this.headersSent = false;\r\n    socket.writable = true;\r\n    this.socket = socket;\r\n  }\r\n\r\n  setHeader(name, val) {\r\n    this._headers[name.toLowerCase()] = val;\r\n  }\r\n\r\n  getHeader(name) {\r\n    return this._headers[name.toLowerCase()];\r\n  }\r\n\r\n  removeHeader(name) {\r\n    delete this._headers[name.toLowerCase()];\r\n  }\r\n\r\n  writeHead(statusCode, reason, headers = reason) {\r\n    this.statusCode = statusCode;\r\n    this.statusMessage = reason || STATUS_CODES[statusCode] || 'unknown';\r\n    \r\n    if (headers) {\r\n      for (const name of headers) {\r\n        this.setHeader(name, headers[name]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = MockHttpResponse;\r\n"],"sourceRoot":"/source/"}